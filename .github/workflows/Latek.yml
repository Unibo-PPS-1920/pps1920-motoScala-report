# This is a basic workflow to help you get started with Actions
name: Latek Build
on:
  push:
    branches: [ master,relese ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_latek:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Set selected color
        shell: bash
        run: |
          alias echo='echo -e'

      - name: Setup Git repo
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
        
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: main.tex
          #pre_compile: "tlmgr update --self --all"
          args: "-pdf -file-line-error -halt-on-error -interaction=nonstopmode -logfilewarninglist -Werror"
          post_compile: "latexmk -c"
      - name: Split log
        if: failure()
        shell: bash
        run: cat main.log | grep -n -E 'LaTeX Error|LaTeX Warning' --group-separator======================== > small.log
      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Logs
          path: |
            main.log
            small.log
            
      - name: Print small log
        if: failure()
        shell: bash
        run: cat small.log > &2
        
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: main.pdf
          
      - name: Fetch tags
        shell: bash
        run: git fetch --tags -f

      - name: Deploy
        if: ${{github.ref == 'refs/heads/relese'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(git describe --tags --exact-match HEAD)
          hub release create -m "$(git tag -l --format='%(contents)' "$TAG")" "$TAG" || true
          while IFS= read -r file; do
            pdf="${file%.*}.pdf"
            echo "Delivering file $pdf"
            hub release edit -m '' -a "$pdf" "$TAG"
          done <"success-list"
        

